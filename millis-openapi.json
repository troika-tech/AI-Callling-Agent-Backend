{
  "openapi": "3.1.0",
  "info": { "title": "FastAPI", "version": "0.1.0" },
  "servers": [
    {
      "url": "https://api-west.millis.ai",
      "description": "US Region API Gateway"
    },
    {
      "url": "https://api-eu-west.millis.ai",
      "description": "EU Region API Gateway"
    }
  ],
  "paths": {
    "/register_call": {
      "post": {
        "tags": ["Call Management"],
        "summary": "Register Call",
        "operationId": "register_call_register_call_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InitAgent" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallRegistrationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/register_sip_call": {
      "post": {
        "tags": ["Call Management"],
        "summary": "Register Sip Call",
        "operationId": "register_sip_call_register_sip_call_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InitAgent" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/sip": {
      "post": {
        "tags": ["Connectivity"],
        "summary": "Create Sip",
        "operationId": "create_sip_sip_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PersistantSipCallData" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/sip/{call_id}": {
      "delete": {
        "tags": ["Connectivity"],
        "summary": "Delete Sip",
        "operationId": "delete_sip_sip__call_id__delete",
        "parameters": [
          {
            "name": "call_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Call Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/set_phone_agent": {
      "post": {
        "tags": ["Phones"],
        "summary": "Set Phone Agent",
        "operationId": "set_phone_agent_set_phone_agent_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetPhoneAgentData" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}/terminate": {
      "post": {
        "tags": ["Call Management"],
        "summary": "Terminate Call Session",
        "operationId": "terminate_call_session_sessions__session_id__terminate_post",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Session Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  { "$ref": "#/components/schemas/SessionTerminateData" },
                  { "type": "null" }
                ],
                "title": "Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/start_outbound_call": {
      "post": {
        "tags": ["Call Management"],
        "summary": "Start Outbound Call",
        "operationId": "start_outbound_call_start_outbound_call_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/StartOutboundCallData" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallRegistrationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/chat/completions": {
      "post": {
        "tags": ["Conversational AI"],
        "summary": "Chat Completions",
        "operationId": "chat_completions_chat_completions_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChatCompletionData" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with streaming data",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "example": "data: {\"choices\":[{\"delta\":{\"content\":\"Hello\"}}]}\n\n"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/webrtc/offer": {
      "post": {
        "tags": ["Connectivity"],
        "summary": "Create a WebRTC offer",
        "description": "Create a WebRTC offer for a call.",
        "operationId": "offer_webrtc_offer_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MillisWebRTCOfferRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MillisWebRTCOfferResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/user/info": {
      "get": {
        "tags": ["User"],
        "summary": "Get User Info",
        "operationId": "get_user_info_user_info_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user info",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserInfo" }
              }
            }
          },
          "404": { "description": "User not found" },
          "401": { "description": "Unauthorized" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/agents": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get Agents",
        "operationId": "get_agents_agents_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Agent-Output" },
                  "title": "Response Get Agents Agents Get"
                }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Agents"],
        "summary": "Create Agent",
        "operationId": "create_agent_agents_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AgentCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Agent-Input" }
              }
            }
          },
          "404": { "description": "Not found" },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/agents/{agent_id}": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get Agent",
        "operationId": "get_agent_agents__agent_id__get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Agent Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Agent-Output" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Agents"],
        "summary": "Update Agent",
        "operationId": "update_agent_agents__agent_id__put",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Agent Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AgentUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Agents"],
        "summary": "Delete Agent",
        "operationId": "delete_agent_agents__agent_id__delete",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Agent Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/agents/{agent_id}/duplicate": {
      "post": {
        "tags": ["Agents"],
        "summary": "Duplicate Agent",
        "operationId": "duplicate_agent_agents__agent_id__duplicate_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Agent Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Agent-Output" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/agents/{agent_id}/call-histories": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get Call Histories",
        "operationId": "get_call_histories_agents__agent_id__call_histories_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Agent Id" }
          },
          {
            "name": "start_at",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "number" }, { "type": "null" }],
              "title": "Start At"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 20, "title": "Limit" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CallHistoryResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/agents/{agent_id}/embed": {
      "post": {
        "tags": ["Agents"],
        "summary": "Set Embed Config",
        "operationId": "set_embed_config_agents__agent_id__embed_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Agent Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmbedConfig" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/call-logs": {
      "get": {
        "tags": ["Call Logs"],
        "summary": "List Call Histories",
        "operationId": "list_call_histories_call_logs_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "exclusiveMinimum": 0,
              "description": "Number of records to return per page. Max 100.",
              "default": 20,
              "title": "Limit"
            },
            "description": "Number of records to return per page. Max 100."
          },
          {
            "name": "start_after_ts",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "number" }, { "type": "null" }],
              "description": "Cursor for pagination. This should be the 'next_cursor' value returned from a previous request.",
              "title": "Start After Ts"
            },
            "description": "Cursor for pagination. This should be the 'next_cursor' value returned from a previous request."
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "number" }, { "type": "null" }],
              "description": "Start of time window filter (Unix timestamp).",
              "title": "Start Time"
            },
            "description": "Start of time window filter (Unix timestamp)."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "number" }, { "type": "null" }],
              "description": "End of time window filter (Unix timestamp).",
              "title": "End Time"
            },
            "description": "End of time window filter (Unix timestamp)."
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Filter by specific agent ID.",
              "title": "Agent Id"
            },
            "description": "Filter by specific agent ID."
          },
          {
            "name": "call_status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Filter by call status (e.g., COMPLETED, FAILED, etc.).",
              "title": "Call Status"
            },
            "description": "Filter by call status (e.g., COMPLETED, FAILED, etc.)."
          },
          {
            "name": "phone_number",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Filter by phone number (searches in voip field).",
              "title": "Phone Number"
            },
            "description": "Filter by phone number (searches in voip field)."
          },
          {
            "name": "campaign_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Filter by specific campaign ID.",
              "title": "Campaign Id"
            },
            "description": "Filter by specific campaign ID."
          },
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCallHistoryResponse"
                }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/call-logs/{session_id}": {
      "get": {
        "tags": ["Call Logs"],
        "summary": "Get Call History",
        "operationId": "get_call_history_call_logs__session_id__get",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Session Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fast_api_data__history__CallHistory"
                }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/call-logs/{session_id}/recording": {
      "delete": {
        "tags": ["Call Logs"],
        "summary": "Delete Call Recording",
        "operationId": "delete_call_recording_call_logs__session_id__recording_delete",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Session Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/voices": {
      "get": {
        "tags": ["Voices"],
        "summary": "Get Voices",
        "operationId": "get_voices_voices_get",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "default": "en", "title": "Language" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/VoiceOption" },
                  "title": "Response Get Voices Voices Get"
                }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/voices/custom": {
      "get": {
        "tags": ["Voices"],
        "summary": "Get Custom Voices",
        "operationId": "get_custom_voices_voices_custom_get",
        "parameters": [
          {
            "name": "lang_code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en",
              "title": "Lang Code"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/VoiceOption" },
                  "title": "Response Get Custom Voices Voices Custom Get"
                }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/knowledge/generate_presigned_url": {
      "post": {
        "tags": ["Knowledge Base"],
        "summary": "Generate Presigned Url",
        "operationId": "generate_presigned_url_knowledge_generate_presigned_url_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PresignedUrlRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrlResponse"
                }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/knowledge/create_file": {
      "post": {
        "tags": ["Knowledge Base"],
        "summary": "Create File",
        "operationId": "create_file_knowledge_create_file_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateFileRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/knowledge/delete_file": {
      "post": {
        "tags": ["Knowledge Base"],
        "summary": "Delete File",
        "operationId": "delete_file_knowledge_delete_file_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DeleteFileRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/knowledge/set_agent_files": {
      "post": {
        "tags": ["Knowledge Base"],
        "summary": "Set Agent Files",
        "operationId": "set_agent_files_knowledge_set_agent_files_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetAgentFilesRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/knowledge/list_files": {
      "get": {
        "tags": ["Knowledge Base"],
        "summary": "List Files",
        "operationId": "list_files_knowledge_list_files_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FileInfo" },
                  "title": "Response List Files Knowledge List Files Get"
                }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/phones": {
      "get": {
        "tags": ["Phones"],
        "summary": "Get Phones",
        "operationId": "get_phones_phones_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Phone" },
                  "title": "Response Get Phones Phones Get"
                }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/phones/{phone}": {
      "get": {
        "tags": ["Phones"],
        "summary": "Get Phone",
        "operationId": "get_phone_phones__phone__get",
        "parameters": [
          {
            "name": "phone",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Phone" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Phone" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Phones"],
        "summary": "Delete Phone",
        "operationId": "delete_phone_phones__phone__delete",
        "parameters": [
          {
            "name": "phone",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Phone" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/phones/{phone}/agent-config-override": {
      "post": {
        "tags": ["Phones"],
        "summary": "Set Agent Config Override",
        "description": "Set agent config override for a specific phone number",
        "operationId": "set_agent_config_override_phones__phone__agent_config_override_post",
        "parameters": [
          {
            "name": "phone",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Phone" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialAgentConfig-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/phones/{phone}/set_agent": {
      "post": {
        "tags": ["Phones"],
        "summary": "Set Agent",
        "operationId": "set_agent_phones__phone__set_agent_post",
        "parameters": [
          {
            "name": "phone",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Phone" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetAgentRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/phones/{phone}/tags": {
      "put": {
        "tags": ["Phones"],
        "summary": "Update Phone Tags",
        "description": "Update all tags for a phone number (replaces existing tags)",
        "operationId": "update_phone_tags_phones__phone__tags_put",
        "parameters": [
          {
            "name": "phone",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Phone" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateTagsRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/phones/purchase": {
      "post": {
        "tags": ["Phones", "Phones"],
        "summary": "Purchase Phone Number",
        "operationId": "purchase_phone_number_phones_purchase_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchasePhoneNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/phones/import": {
      "post": {
        "tags": ["Phones", "Phones"],
        "summary": "Import Phone Number",
        "operationId": "import_phone_number_phones_import_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "Authorization" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  { "$ref": "#/components/schemas/ImportVonageRequest" },
                  { "$ref": "#/components/schemas/ImportTwilioRequest" },
                  { "$ref": "#/components/schemas/ImportPlivoRequest" },
                  { "$ref": "#/components/schemas/ImportExotelRequest" },
                  { "$ref": "#/components/schemas/ImportTelnyxRequest" }
                ],
                "title": "Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/campaigns": {
      "post": {
        "tags": ["Campaigns"],
        "summary": "Create Campaign",
        "operationId": "create_campaign_campaigns_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CampaignCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Campaign" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Campaigns"],
        "summary": "Get All Campaigns",
        "operationId": "get_all_campaigns_campaigns_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Campaign" },
                  "title": "Response Get All Campaigns Campaigns Get"
                }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/records": {
      "post": {
        "tags": ["Campaigns"],
        "summary": "Upload Records",
        "operationId": "upload_records_campaigns__campaign_id__records_post",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Campaign Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CampaignRecordCreate"
                },
                "title": "Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/set_caller": {
      "post": {
        "tags": ["Campaigns"],
        "summary": "Set Caller",
        "operationId": "set_caller_campaigns__campaign_id__set_caller_post",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Campaign Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetCallerRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/start": {
      "post": {
        "tags": ["Campaigns"],
        "summary": "Start Campaign",
        "operationId": "start_campaign_campaigns__campaign_id__start_post",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Campaign Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/stop": {
      "post": {
        "tags": ["Campaigns"],
        "summary": "Stop Campaign",
        "operationId": "stop_campaign_campaigns__campaign_id__stop_post",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Campaign Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}": {
      "get": {
        "tags": ["Campaigns"],
        "summary": "Get Campaign",
        "operationId": "get_campaign_campaigns__campaign_id__get",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Campaign Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Campaign" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Campaigns"],
        "summary": "Delete Campaign",
        "operationId": "delete_campaign_campaigns__campaign_id__delete",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Campaign Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/info": {
      "put": {
        "tags": ["Campaigns"],
        "summary": "Edit Campaign Info",
        "operationId": "edit_campaign_info_campaigns__campaign_id__info_put",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Campaign Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CampaignEditRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CampaignInfo" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Campaigns"],
        "summary": "Get Campaign Info",
        "operationId": "get_campaign_info_campaigns__campaign_id__info_get",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Campaign Id" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CampaignInfo" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/records/{phone}": {
      "delete": {
        "tags": ["Campaigns"],
        "summary": "Delete Campaign Record",
        "operationId": "delete_campaign_record_campaigns__campaign_id__records__phone__delete",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Campaign Id" }
          },
          {
            "name": "phone",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Phone" }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Private Key",
              "title": "Authorization"
            },
            "description": "Private Key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GenericResponse" }
              }
            }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Agent-Input": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "name": { "type": "string", "title": "Name" },
          "config": { "$ref": "#/components/schemas/AgentConfig-Input" },
          "created_at": { "type": "integer", "title": "Created At" }
        },
        "type": "object",
        "required": ["id", "name", "config", "created_at"],
        "title": "Agent"
      },
      "Agent-Output": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "name": { "type": "string", "title": "Name" },
          "config": { "$ref": "#/components/schemas/AgentConfig-Output" },
          "created_at": { "type": "integer", "title": "Created At" }
        },
        "type": "object",
        "required": ["id", "name", "config", "created_at"],
        "title": "Agent"
      },
      "AgentCallData": {
        "properties": {
          "agent_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Agent Id"
          },
          "agent_config": {
            "anyOf": [
              { "$ref": "#/components/schemas/PartialAgentConfig-Input" },
              { "type": "null" }
            ]
          },
          "metadata": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Metadata"
          },
          "include_metadata_in_prompt": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Include Metadata In Prompt"
          }
        },
        "type": "object",
        "title": "AgentCallData"
      },
      "AgentConfig-Input": {
        "properties": {
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "The primary prompt used to guide the agent's behavior."
          },
          "voice": {
            "allOf": [{ "$ref": "#/components/schemas/Voice" }],
            "description": "Detailed voice configuration for the agent."
          },
          "flow": {
            "anyOf": [
              { "$ref": "#/components/schemas/Flow-Input" },
              { "type": "null" }
            ],
            "description": "Settings for conversation flow management."
          },
          "first_message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Message",
            "description": "The agent's opening message for conversations."
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/fast_api_data__data__Function"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Tools",
            "description": "List of tools/functions the agent can use."
          },
          "millis_functions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/MillisFunction-Input"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Millis Functions",
            "description": "Millis-specific functions for agent customization."
          },
          "app_functions": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/AppFunction" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "App Functions",
            "description": "Predefined functions tied to app integrations."
          },
          "custom_llm_websocket": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Custom Llm Websocket",
            "description": "WebSocket URL for custom LLM integration."
          },
          "language": {
            "anyOf": [
              { "$ref": "#/components/schemas/Language" },
              { "type": "null" }
            ],
            "description": "The default language for the agent.",
            "default": "en-US"
          },
          "vad_threshold": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Vad Threshold",
            "description": "Voice activity detection threshold for detecting speech."
          },
          "llm": {
            "anyOf": [
              { "$ref": "#/components/schemas/LLM" },
              { "type": "null" }
            ],
            "description": "Configuration for the LLM used by the agent."
          },
          "session_timeout": {
            "anyOf": [
              { "$ref": "#/components/schemas/SessionTimeout" },
              { "type": "null" }
            ],
            "description": "Settings related to session duration and idle time."
          },
          "session_data_webhook": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/WebhookConfig" },
              { "type": "null" }
            ],
            "title": "Session Data Webhook",
            "description": "Webhook for receiving end of session data."
          },
          "privacy_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/PrivacySetting" },
              { "type": "null" }
            ],
            "description": "Settings for user privacy and data collection."
          },
          "custom_vocabulary": {
            "anyOf": [
              { "$ref": "#/components/schemas/CustomVocabulary" },
              { "type": "null" }
            ],
            "description": "Custom vocabulary for improving recognition."
          },
          "extra_prompt_webhook": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/WebhookConfig" },
              { "type": "null" }
            ],
            "title": "Extra Prompt Webhook",
            "description": "Webhook for providing extra prompts and metadata at the start of a conversation."
          },
          "switch_language": {
            "anyOf": [
              { "$ref": "#/components/schemas/SwitchLanguage" },
              { "type": "null" }
            ],
            "description": "Settings for dynamically switching agent language."
          },
          "knowledge_base": {
            "anyOf": [
              { "$ref": "#/components/schemas/KnowledgeBase" },
              { "type": "null" }
            ],
            "description": "Configuration for the agent's knowledge base."
          },
          "speech_to_text": {
            "anyOf": [
              { "$ref": "#/components/schemas/SpeechToText" },
              { "type": "null" }
            ],
            "description": "Speech-to-text configuration for transcription."
          },
          "call_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/CallSettings" },
              { "type": "null" }
            ],
            "description": "General settings for calls."
          },
          "memory": {
            "anyOf": [
              { "$ref": "#/components/schemas/MemoryConfig" },
              { "type": "null" }
            ],
            "description": "Memory configuration for the agent."
          },
          "timezone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Timezone",
            "description": "The timezone for the agent's operation."
          }
        },
        "type": "object",
        "required": ["prompt", "voice"],
        "title": "AgentConfig"
      },
      "AgentConfig-Output": {
        "properties": {
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "The primary prompt used to guide the agent's behavior."
          },
          "voice": {
            "allOf": [{ "$ref": "#/components/schemas/Voice" }],
            "description": "Detailed voice configuration for the agent."
          },
          "flow": {
            "anyOf": [
              { "$ref": "#/components/schemas/Flow-Output" },
              { "type": "null" }
            ],
            "description": "Settings for conversation flow management."
          },
          "first_message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Message",
            "description": "The agent's opening message for conversations."
          },
          "tools": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Function-Output" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Tools",
            "description": "List of tools/functions the agent can use."
          },
          "millis_functions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/MillisFunction-Output"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Millis Functions",
            "description": "Millis-specific functions for agent customization."
          },
          "app_functions": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/AppFunction" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "App Functions",
            "description": "Predefined functions tied to app integrations."
          },
          "custom_llm_websocket": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Custom Llm Websocket",
            "description": "WebSocket URL for custom LLM integration."
          },
          "language": {
            "anyOf": [
              { "$ref": "#/components/schemas/Language" },
              { "type": "null" }
            ],
            "description": "The default language for the agent.",
            "default": "en-US"
          },
          "vad_threshold": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Vad Threshold",
            "description": "Voice activity detection threshold for detecting speech."
          },
          "llm": {
            "anyOf": [
              { "$ref": "#/components/schemas/LLM" },
              { "type": "null" }
            ],
            "description": "Configuration for the LLM used by the agent."
          },
          "session_timeout": {
            "anyOf": [
              { "$ref": "#/components/schemas/SessionTimeout" },
              { "type": "null" }
            ],
            "description": "Settings related to session duration and idle time."
          },
          "session_data_webhook": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/WebhookConfig" },
              { "type": "null" }
            ],
            "title": "Session Data Webhook",
            "description": "Webhook for receiving end of session data."
          },
          "privacy_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/PrivacySetting" },
              { "type": "null" }
            ],
            "description": "Settings for user privacy and data collection."
          },
          "custom_vocabulary": {
            "anyOf": [
              { "$ref": "#/components/schemas/CustomVocabulary" },
              { "type": "null" }
            ],
            "description": "Custom vocabulary for improving recognition."
          },
          "extra_prompt_webhook": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/WebhookConfig" },
              { "type": "null" }
            ],
            "title": "Extra Prompt Webhook",
            "description": "Webhook for providing extra prompts and metadata at the start of a conversation."
          },
          "switch_language": {
            "anyOf": [
              { "$ref": "#/components/schemas/SwitchLanguage" },
              { "type": "null" }
            ],
            "description": "Settings for dynamically switching agent language."
          },
          "knowledge_base": {
            "anyOf": [
              { "$ref": "#/components/schemas/KnowledgeBase" },
              { "type": "null" }
            ],
            "description": "Configuration for the agent's knowledge base."
          },
          "speech_to_text": {
            "anyOf": [
              { "$ref": "#/components/schemas/SpeechToText" },
              { "type": "null" }
            ],
            "description": "Speech-to-text configuration for transcription."
          },
          "call_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/CallSettings" },
              { "type": "null" }
            ],
            "description": "General settings for calls."
          },
          "memory": {
            "anyOf": [
              { "$ref": "#/components/schemas/MemoryConfig" },
              { "type": "null" }
            ],
            "description": "Memory configuration for the agent."
          },
          "timezone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Timezone",
            "description": "The timezone for the agent's operation."
          }
        },
        "type": "object",
        "required": ["prompt", "voice"],
        "title": "AgentConfig"
      },
      "AgentCreate": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "config": { "$ref": "#/components/schemas/AgentConfig-Input" }
        },
        "type": "object",
        "required": ["name", "config"],
        "title": "AgentCreate"
      },
      "AgentTerminateCall": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Specifies whether the agent can end the call autonomously."
          },
          "instruction": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Instruction",
            "description": "Custom instructions for the agent on when to terminate the call."
          },
          "messages": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Messages",
            "description": "List of messages the agent may use before ending a call."
          }
        },
        "type": "object",
        "required": ["enabled"],
        "title": "AgentTerminateCall"
      },
      "AgentUpdate": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "config": { "$ref": "#/components/schemas/PartialAgentConfig-Input" }
        },
        "type": "object",
        "required": ["name", "config"],
        "title": "AgentUpdate"
      },
      "AppFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the app-specific function."
          },
          "credentials": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Credentials",
            "description": "Credentials required for app integration."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "AppFunction"
      },
      "AssistantMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": ["assistant"],
            "const": "assistant",
            "title": "Role"
          },
          "content": { "type": "string", "title": "Content" },
          "tool_calls": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ToolCall" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Tool Calls"
          }
        },
        "type": "object",
        "required": ["role", "content"],
        "title": "AssistantMessage"
      },
      "AutoFillResponses": {
        "properties": {
          "response_gap_threshold": {
            "type": "integer",
            "title": "Response Gap Threshold",
            "description": "The time (in milliseconds) before the agent uses an auto-fill response."
          },
          "messages": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Messages",
            "description": "Predefined messages for the agent to use when there are response gaps."
          }
        },
        "type": "object",
        "required": ["response_gap_threshold", "messages"],
        "title": "AutoFillResponses"
      },
      "AutoRefillConfig": {
        "properties": {
          "enabled": { "type": "boolean", "title": "Enabled" },
          "threshold": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Threshold"
          },
          "refill_amount": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Refill Amount"
          }
        },
        "type": "object",
        "required": ["enabled"],
        "title": "AutoRefillConfig"
      },
      "BackgroundSetting": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL for the background audio."
          },
          "volume": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Volume",
            "description": "Volume level for the background audio."
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "BackgroundSetting"
      },
      "ButtonState": {
        "properties": {
          "idle": { "type": "string", "title": "Idle" },
          "connecting": { "type": "string", "title": "Connecting" },
          "running": { "type": "string", "title": "Running" }
        },
        "type": "object",
        "required": ["idle", "connecting", "running"],
        "title": "ButtonState"
      },
      "CallHistoryResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/fast_api_data__agent__CallHistory"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/GenericResponse" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "CallHistoryResponse"
      },
      "CallRegistrationResponse": {
        "properties": {
          "call_id": { "type": "string", "title": "Call Id" },
          "session_id": { "type": "string", "title": "Session Id" }
        },
        "type": "object",
        "required": ["call_id", "session_id"],
        "title": "CallRegistrationResponse"
      },
      "CallSettings": {
        "properties": {
          "enable_recording": {
            "type": "boolean",
            "title": "Enable Recording",
            "description": "Specifies whether call recording is enabled.",
            "default": false
          },
          "background": {
            "anyOf": [
              { "$ref": "#/components/schemas/BackgroundSetting" },
              { "type": "null" }
            ],
            "description": "Background audio settings."
          }
        },
        "type": "object",
        "title": "CallSettings"
      },
      "CallTransfer": {
        "properties": {
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone",
            "description": "The phone number to transfer the call to (legacy support)."
          },
          "phones": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/TransferOption" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Phones",
            "description": "List of available phone transfer options with descriptions."
          },
          "instruction": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Instruction",
            "description": "General instructions for the agent on how to handle call transfers."
          },
          "messages": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Messages",
            "description": "Predefined messages for the agent to say before initiating the call transfer."
          }
        },
        "type": "object",
        "title": "CallTransfer"
      },
      "Campaign": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "name": { "type": "string", "title": "Name" },
          "status": { "$ref": "#/components/schemas/CampaignStatus" },
          "records": {
            "items": { "$ref": "#/components/schemas/CampaignRecord" },
            "type": "array",
            "title": "Records"
          },
          "created_at": { "type": "integer", "title": "Created At" }
        },
        "type": "object",
        "required": ["id", "name", "status", "records", "created_at"],
        "title": "Campaign"
      },
      "CampaignCreate": {
        "properties": { "name": { "type": "string", "title": "Name" } },
        "type": "object",
        "required": ["name"],
        "title": "CampaignCreate"
      },
      "CampaignEditRequest": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "include_metadata_in_prompt": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Include Metadata In Prompt"
          }
        },
        "type": "object",
        "title": "CampaignEditRequest"
      },
      "CampaignInfo": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "name": { "type": "string", "title": "Name" },
          "status": { "$ref": "#/components/schemas/CampaignStatus" },
          "created_at": { "type": "integer", "title": "Created At" },
          "caller": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Caller"
          },
          "include_metadata_in_prompt": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Include Metadata In Prompt",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "name", "status", "created_at"],
        "title": "CampaignInfo"
      },
      "CampaignRecord": {
        "properties": {
          "phone": { "type": "string", "title": "Phone" },
          "metadata": { "type": "object", "title": "Metadata" },
          "call_status": {
            "$ref": "#/components/schemas/third_party_helpers__campaign_helper__CallStatus"
          }
        },
        "type": "object",
        "required": ["phone", "metadata", "call_status"],
        "title": "CampaignRecord"
      },
      "CampaignRecordCreate": {
        "properties": {
          "phone": { "type": "string", "title": "Phone" },
          "metadata": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": ["phone"],
        "title": "CampaignRecordCreate"
      },
      "CampaignStatus": {
        "type": "string",
        "enum": ["idle", "started", "paused", "finished", "failed"],
        "title": "CampaignStatus"
      },
      "ChatCompletionData": {
        "properties": {
          "agent": { "$ref": "#/components/schemas/AgentCallData" },
          "messages": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/UserMessage" },
                { "$ref": "#/components/schemas/AssistantMessage" },
                { "$ref": "#/components/schemas/ToolMessage" }
              ]
            },
            "type": "array",
            "title": "Messages"
          },
          "end_of_session": {
            "type": "boolean",
            "title": "End Of Session",
            "default": false
          }
        },
        "type": "object",
        "required": ["agent", "messages"],
        "title": "ChatCompletionData"
      },
      "CreateFileRequest": {
        "properties": {
          "object_key": { "type": "string", "title": "Object Key" },
          "description": { "type": "string", "title": "Description" },
          "name": { "type": "string", "title": "Name" },
          "file_type": { "type": "string", "title": "File Type" },
          "size": { "type": "integer", "title": "Size" }
        },
        "type": "object",
        "required": ["object_key", "description", "name", "file_type", "size"],
        "title": "CreateFileRequest"
      },
      "CustomVocabulary": {
        "properties": {
          "keywords": {
            "additionalProperties": { "type": "integer" },
            "type": "object",
            "title": "Keywords",
            "description": "Custom keywords with their associated weights for ASR prioritization."
          }
        },
        "type": "object",
        "required": ["keywords"],
        "title": "CustomVocabulary"
      },
      "DTMFDial": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Specifies whether the agent can send DTMF dial tones during calls.",
            "default": false
          },
          "instruction": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Instruction",
            "description": "Optional instructions for the agent on how to use DTMF tones during calls (e.g., 'Press 1 after the prompt')."
          }
        },
        "type": "object",
        "title": "DTMFDial"
      },
      "DeleteFileRequest": {
        "properties": { "id": { "type": "string", "title": "Id" } },
        "type": "object",
        "required": ["id"],
        "title": "DeleteFileRequest"
      },
      "EmbedConfig": {
        "properties": {
          "titles": {
            "anyOf": [
              { "$ref": "#/components/schemas/ButtonState" },
              { "type": "null" }
            ]
          },
          "icons": {
            "anyOf": [
              { "$ref": "#/components/schemas/ButtonState" },
              { "type": "null" }
            ]
          },
          "background": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Background"
          },
          "buttonCss": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Buttoncss"
          },
          "size": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Size"
          },
          "transcript": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Transcript"
          },
          "region": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Region"
          }
        },
        "type": "object",
        "title": "EmbedConfig"
      },
      "FileInfo": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "description": { "type": "string", "title": "Description" },
          "name": { "type": "string", "title": "Name" },
          "file_type": { "type": "string", "title": "File Type" },
          "size": { "type": "integer", "title": "Size" },
          "create_at": { "type": "number", "title": "Create At" }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "name",
          "file_type",
          "size",
          "create_at"
        ],
        "title": "FileInfo"
      },
      "Flow-Input": {
        "properties": {
          "user_start_first": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "User Start First",
            "description": "Determines if the user speaks first to initiate the conversation."
          },
          "interruption": {
            "anyOf": [
              { "$ref": "#/components/schemas/Interruption" },
              { "type": "null" }
            ],
            "description": "Settings related to handling interruptions during the agent's responses."
          },
          "response_delay": {
            "anyOf": [
              { "type": "integer" },
              { "$ref": "#/components/schemas/ResponseDelay" },
              { "type": "null" }
            ],
            "title": "Response Delay",
            "description": "Configures delays for agent responses."
          },
          "auto_fill_responses": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutoFillResponses" },
              { "type": "null" }
            ],
            "description": "Settings for predefined agent responses when there are response gaps."
          },
          "agent_terminate_call": {
            "anyOf": [
              { "$ref": "#/components/schemas/AgentTerminateCall" },
              { "type": "null" }
            ],
            "description": "Configuration for enabling the agent to terminate calls autonomously."
          },
          "voicemail": {
            "anyOf": [
              { "$ref": "#/components/schemas/Voicemail" },
              { "type": "null" }
            ],
            "description": "Settings related to handling voicemail scenarios."
          },
          "call_transfer": {
            "anyOf": [
              { "$ref": "#/components/schemas/CallTransfer" },
              { "type": "null" }
            ],
            "description": "Configuration for transferring calls to another phone number."
          },
          "inactivity_handling": {
            "anyOf": [
              { "$ref": "#/components/schemas/InactivityHandling" },
              { "type": "null" }
            ],
            "description": "Settings for handling user inactivity during the call."
          },
          "dtmf_dial": {
            "anyOf": [
              { "$ref": "#/components/schemas/DTMFDial" },
              { "type": "null" }
            ],
            "description": "Configuration for enabling DTMF dial tone support."
          }
        },
        "type": "object",
        "title": "Flow"
      },
      "Flow-Output": {
        "properties": {
          "user_start_first": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "User Start First",
            "description": "Determines if the user speaks first to initiate the conversation."
          },
          "interruption": {
            "anyOf": [
              { "$ref": "#/components/schemas/Interruption" },
              { "type": "null" }
            ],
            "description": "Settings related to handling interruptions during the agent's responses."
          },
          "response_delay": {
            "anyOf": [
              { "type": "integer" },
              { "$ref": "#/components/schemas/ResponseDelay" },
              { "type": "null" }
            ],
            "title": "Response Delay",
            "description": "Configures delays for agent responses."
          },
          "auto_fill_responses": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutoFillResponses" },
              { "type": "null" }
            ],
            "description": "Settings for predefined agent responses when there are response gaps."
          },
          "agent_terminate_call": {
            "anyOf": [
              { "$ref": "#/components/schemas/AgentTerminateCall" },
              { "type": "null" }
            ],
            "description": "Configuration for enabling the agent to terminate calls autonomously."
          },
          "voicemail": {
            "anyOf": [
              { "$ref": "#/components/schemas/Voicemail" },
              { "type": "null" }
            ],
            "description": "Settings related to handling voicemail scenarios."
          },
          "call_transfer": {
            "anyOf": [
              { "$ref": "#/components/schemas/CallTransfer" },
              { "type": "null" }
            ],
            "description": "Configuration for transferring calls to another phone number."
          },
          "inactivity_handling": {
            "anyOf": [
              { "$ref": "#/components/schemas/InactivityHandling" },
              { "type": "null" }
            ],
            "description": "Settings for handling user inactivity during the call."
          },
          "dtmf_dial": {
            "anyOf": [
              { "$ref": "#/components/schemas/DTMFDial" },
              { "type": "null" }
            ],
            "description": "Configuration for enabling DTMF dial tone support."
          }
        },
        "type": "object",
        "title": "Flow"
      },
      "Function-Output": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the function."
          },
          "params": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Param" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Params",
            "description": "List of parameters required by the function."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A description of the function's purpose."
          },
          "webhook": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Webhook",
            "description": "The webhook URL to trigger the function."
          },
          "header": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Header",
            "description": "Headers to include in the webhook request."
          },
          "method": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Method",
            "description": "HTTP method to use for the webhook (e.g., POST, GET)."
          },
          "timeout": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Timeout",
            "description": "Timeout in seconds for the function to complete before failing."
          },
          "run_after_call": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Run After Call",
            "description": "Specifies if the function should only run after the call ends."
          },
          "messages": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Messages",
            "description": "Predefined messages for agent to say while executing the function."
          },
          "response_mode": {
            "anyOf": [
              { "type": "string", "enum": ["strict", "flexible"] },
              { "type": "null" }
            ],
            "title": "Response Mode",
            "description": "Indicates if agent's response should be strict or flexible."
          },
          "execute_after_message": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Execute After Message",
            "description": "Indicates if the function starts executing only after a predefined message is played."
          },
          "exclude_session_id": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Exclude Session Id",
            "description": "Indicates if the session ID should not be included in the webhook request."
          },
          "include_metadata": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Include Metadata",
            "description": "Indicates if metadata should be included in the webhook request."
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "Function"
      },
      "GenericResponse": {
        "properties": { "success": { "type": "boolean", "title": "Success" } },
        "type": "object",
        "required": ["success"],
        "title": "GenericResponse"
      },
      "HTTPError": {
        "properties": { "detail": { "type": "string", "title": "Detail" } },
        "type": "object",
        "required": ["detail"],
        "title": "HTTPError",
        "example": { "detail": "HTTPException raised." }
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HistorySettings": {
        "properties": {
          "history_message_limit": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "History Message Limit",
            "description": "Number of latest chat messages to keep and send to LLM during a call. If None, defaults to no limit."
          },
          "history_tool_result_limit": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "History Tool Result Limit",
            "description": "Only include tool call results if they appear within the last N chat messages."
          }
        },
        "type": "object",
        "title": "HistorySettings"
      },
      "ImportExotelRequest": {
        "properties": {
          "country": { "type": "string", "title": "Country" },
          "provider": {
            "type": "string",
            "title": "Provider",
            "default": "exotel"
          },
          "phone": { "type": "string", "title": "Phone" },
          "region": { "type": "string", "title": "Region" },
          "api_key": { "type": "string", "title": "Api Key" },
          "api_token": { "type": "string", "title": "Api Token" },
          "sid": { "type": "string", "title": "Sid" },
          "subdomain": { "type": "string", "title": "Subdomain" },
          "app_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "App Id"
          }
        },
        "type": "object",
        "required": [
          "country",
          "phone",
          "region",
          "api_key",
          "api_token",
          "sid",
          "subdomain"
        ],
        "title": "ImportExotelRequest"
      },
      "ImportPlivoRequest": {
        "properties": {
          "country": { "type": "string", "title": "Country" },
          "provider": {
            "type": "string",
            "title": "Provider",
            "default": "plivo"
          },
          "phone": { "type": "string", "title": "Phone" },
          "region": { "type": "string", "title": "Region" },
          "auth_id": { "type": "string", "title": "Auth Id" },
          "auth_token": { "type": "string", "title": "Auth Token" }
        },
        "type": "object",
        "required": ["country", "phone", "region", "auth_id", "auth_token"],
        "title": "ImportPlivoRequest"
      },
      "ImportTelnyxRequest": {
        "properties": {
          "country": { "type": "string", "title": "Country" },
          "provider": {
            "type": "string",
            "title": "Provider",
            "default": "telnyx"
          },
          "phone": { "type": "string", "title": "Phone" },
          "region": { "type": "string", "title": "Region" },
          "api_key": { "type": "string", "title": "Api Key" }
        },
        "type": "object",
        "required": ["country", "phone", "region", "api_key"],
        "title": "ImportTelnyxRequest"
      },
      "ImportTwilioRequest": {
        "properties": {
          "country": { "type": "string", "title": "Country" },
          "provider": {
            "type": "string",
            "title": "Provider",
            "default": "twilio"
          },
          "phone": { "type": "string", "title": "Phone" },
          "region": { "type": "string", "title": "Region" },
          "api_key": { "type": "string", "title": "Api Key" },
          "api_secret": { "type": "string", "title": "Api Secret" },
          "account_sid": { "type": "string", "title": "Account Sid" }
        },
        "type": "object",
        "required": [
          "country",
          "phone",
          "region",
          "api_key",
          "api_secret",
          "account_sid"
        ],
        "title": "ImportTwilioRequest"
      },
      "ImportVonageRequest": {
        "properties": {
          "country": { "type": "string", "title": "Country" },
          "provider": {
            "type": "string",
            "title": "Provider",
            "default": "vonage"
          },
          "phone": { "type": "string", "title": "Phone" },
          "region": { "type": "string", "title": "Region" },
          "api_key": { "type": "string", "title": "Api Key" },
          "api_secret": { "type": "string", "title": "Api Secret" },
          "app_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "App Id"
          }
        },
        "type": "object",
        "required": ["country", "phone", "region", "api_key", "api_secret"],
        "title": "ImportVonageRequest"
      },
      "InactivityHandling": {
        "properties": {
          "idle_time": {
            "type": "number",
            "title": "Idle Time",
            "description": "Time in seconds of user inactivity before the agent prompts the user."
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Message the agent says after the initial idle time."
          }
        },
        "type": "object",
        "required": ["idle_time", "message"],
        "title": "InactivityHandling"
      },
      "InitAgent": {
        "properties": {
          "agent_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Agent Id"
          },
          "agent_config": {
            "anyOf": [
              { "$ref": "#/components/schemas/PartialAgentConfig-Input" },
              { "type": "null" }
            ]
          },
          "metadata": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Metadata"
          },
          "include_metadata_in_prompt": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Include Metadata In Prompt"
          },
          "from_phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "From Phone"
          },
          "to_phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "To Phone"
          },
          "session_continuation": {
            "anyOf": [
              { "$ref": "#/components/schemas/SessionContinuation" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "InitAgent"
      },
      "Interruption": {
        "properties": {
          "allowed": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Allowed",
            "description": "Indicates if user interruptions are allowed during the agent's response."
          },
          "keep_interruption_message": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Keep Interruption Message",
            "description": "Specifies whether to keep the interrupted message in the response."
          },
          "first_messsage": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "First Messsage",
            "description": "Defines if interruptions are allowed during the agent's initial message."
          }
        },
        "type": "object",
        "title": "Interruption"
      },
      "KnowledgeBase": {
        "properties": {
          "files": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Files",
            "description": "List of files used as knowledge sources for the agent."
          },
          "messages": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Messages",
            "description": "Predefined messages for agent to say while looking into knowledge base."
          }
        },
        "type": "object",
        "title": "KnowledgeBase"
      },
      "LLM": {
        "properties": {
          "model": {
            "allOf": [{ "$ref": "#/components/schemas/LLMProvider" }],
            "description": "The language model provider used for generating responses."
          },
          "temperature": {
            "type": "number",
            "title": "Temperature",
            "description": "Temperature setting for response variability.",
            "default": 0.0
          },
          "history_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/HistorySettings" },
              { "type": "null" }
            ],
            "description": "Settings related to chat history retention for cost optimization"
          }
        },
        "type": "object",
        "required": ["model"],
        "title": "LLM"
      },
      "LLMProvider": {
        "type": "string",
        "enum": [
          "gpt-3.5-turbo",
          "gpt-4.1",
          "gpt-4.1-mini",
          "gpt-4.1-nano",
          "gpt-4-turbo",
          "gpt-4o-realtime-preview",
          "gpt-4o-mini-realtime-preview",
          "gpt-4o",
          "gpt-4o-mini",
          "llama-3-70b",
          "llama-3-1-8b",
          "llama-3-1-70b",
          "llama-3-1-405b",
          "mistral-large-2407",
          "l3.1-70b-euryale-v2.2",
          "deepseek-v3",
          "gpt-5-nano",
          "gpt-5-mini",
          "llama-3-3-70b"
        ],
        "title": "LLMProvider"
      },
      "Language": {
        "type": "string",
        "enum": [
          "ln",
          "cy",
          "wo",
          "cs",
          "hy",
          "nl",
          "ceb",
          "la",
          "en-NZ",
          "ss",
          "lt",
          "ne",
          "fy",
          "oc",
          "yi",
          "tt",
          "bn",
          "fr-CA",
          "sw",
          "th",
          "ms",
          "ka",
          "pa",
          "fi",
          "ig",
          "af",
          "multi",
          "eu",
          "bs",
          "ps",
          "en-AU",
          "si",
          "ff",
          "de",
          "mt",
          "km",
          "pl",
          "nl-BE",
          "fr",
          "en-IN",
          "no",
          "gu",
          "lo",
          "sk",
          "ht",
          "tk",
          "bg",
          "mn",
          "su",
          "ko",
          "it",
          "id",
          "tl",
          "zu",
          "pt-BR",
          "jv",
          "et",
          "ca",
          "sl",
          "ja",
          "lb",
          "gl",
          "zh-TW",
          "hi",
          "ha",
          "th-TH",
          "lv",
          "ast",
          "sq",
          "tr",
          "ar",
          "sv",
          "haw",
          "tg",
          "lg",
          "ba",
          "mk",
          "vi",
          "hu",
          "el",
          "mi",
          "en-US",
          "kn",
          "az",
          "he",
          "hr",
          "ml",
          "kk",
          "es",
          "br",
          "sr",
          "xh",
          "uk",
          "as",
          "ilo",
          "ru",
          "gd",
          "yo",
          "da",
          "sa",
          "fa",
          "es-419",
          "bo",
          "ur",
          "my",
          "nn",
          "mo",
          "so",
          "mr",
          "tn",
          "sd",
          "sn",
          "uz",
          "de-CH",
          "fo",
          "en-GB",
          "zh",
          "ro",
          "pt",
          "or",
          "ga",
          "ta",
          "mg",
          "en",
          "be",
          "am",
          "te",
          "is"
        ],
        "title": "Language"
      },
      "MemoryConfig": {
        "properties": {
          "user_identifier_key": {
            "type": "string",
            "title": "User Identifier Key",
            "description": "The metadata's variable to use for identifying user",
            "default": ""
          }
        },
        "type": "object",
        "title": "MemoryConfig",
        "description": "Memory configuration focusing on session continuation only."
      },
      "MillisFunction-Input": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the Webform function."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A description of what the function does."
          },
          "params": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Param" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Params",
            "description": "List of parameters included in the function."
          },
          "data": {
            "allOf": [{ "$ref": "#/components/schemas/MillisFunctionData" }],
            "description": "Data required for the function, including parameters."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the function (e.g., webform, webhook)."
          },
          "messages": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Messages",
            "description": "Predefined messages for agent to say while executing the function."
          },
          "response_mode": {
            "anyOf": [
              { "type": "string", "enum": ["strict", "flexible"] },
              { "type": "null" }
            ],
            "title": "Response Mode",
            "description": "Indicates if agent's response should be strict or flexible."
          }
        },
        "type": "object",
        "required": ["name", "description", "data", "type"],
        "title": "MillisFunction"
      },
      "MillisFunction-Output": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the Webform function."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A description of what the function does."
          },
          "params": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Param" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Params",
            "description": "List of parameters included in the function."
          },
          "data": {
            "allOf": [{ "$ref": "#/components/schemas/MillisFunctionData" }],
            "description": "Data required for the function, including parameters."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the function (e.g., webform, webhook)."
          },
          "messages": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Messages",
            "description": "Predefined messages for agent to say while executing the function."
          },
          "response_mode": {
            "anyOf": [
              { "type": "string", "enum": ["strict", "flexible"] },
              { "type": "null" }
            ],
            "title": "Response Mode",
            "description": "Indicates if agent's response should be strict or flexible."
          }
        },
        "type": "object",
        "required": ["name", "description", "data", "type"],
        "title": "MillisFunction"
      },
      "MillisFunctionData": {
        "properties": {
          "param": {
            "allOf": [{ "$ref": "#/components/schemas/MillisFunctionParam" }],
            "description": "Details of a parameter for a Webform function."
          }
        },
        "type": "object",
        "required": ["param"],
        "title": "MillisFunctionData"
      },
      "MillisFunctionParam": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A description of the parameter's use in the function."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the parameter."
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "description": "Specifies if the parameter is mandatory."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The data type of the parameter."
          }
        },
        "type": "object",
        "required": ["description", "name", "required", "type"],
        "title": "MillisFunctionParam"
      },
      "MillisWebRTCOfferRequest": {
        "properties": {
          "offer": { "$ref": "#/components/schemas/WebRTCOffer" },
          "agent_id": { "type": "string", "title": "Agent Id" }
        },
        "type": "object",
        "required": ["offer", "agent_id"],
        "title": "MillisWebRTCOfferRequest"
      },
      "MillisWebRTCOfferResponse": {
        "properties": {
          "answer": { "$ref": "#/components/schemas/WebRTCAnswer" }
        },
        "type": "object",
        "required": ["answer"],
        "title": "MillisWebRTCOfferResponse"
      },
      "PaginatedCallHistoryResponse": {
        "properties": {
          "histories": {
            "items": {
              "$ref": "#/components/schemas/fast_api_data__history__CallHistory"
            },
            "type": "array",
            "title": "Histories"
          },
          "next_cursor": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": ["histories"],
        "title": "PaginatedCallHistoryResponse"
      },
      "Param": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The parameter name for a function."
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "description": "Indicates if the parameter is required."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The data type of the parameter."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A description of the parameter."
          }
        },
        "type": "object",
        "required": ["name", "required", "type", "description"],
        "title": "Param"
      },
      "PartialAgentConfig-Input": {
        "properties": {
          "prompt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Prompt",
            "description": "The prompt used to configure the agent's behavior."
          },
          "voice": {
            "anyOf": [
              { "$ref": "#/components/schemas/Voice" },
              { "type": "null" }
            ],
            "description": "Configuration for the agent's voice."
          },
          "flow": {
            "anyOf": [
              { "$ref": "#/components/schemas/Flow-Input" },
              { "type": "null" }
            ],
            "description": "Settings for conversation flow management."
          },
          "first_message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Message",
            "description": "The agent's opening message for conversations."
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/fast_api_data__data__Function"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Tools",
            "description": "List of tools/functions the agent can use."
          },
          "millis_functions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/MillisFunction-Input"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Millis Functions",
            "description": "Millis-specific functions for agent customization."
          },
          "app_functions": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/AppFunction" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "App Functions",
            "description": "Predefined functions tied to app integrations."
          },
          "custom_llm_websocket": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Custom Llm Websocket",
            "description": "WebSocket URL for custom LLM integration."
          },
          "language": {
            "anyOf": [
              { "$ref": "#/components/schemas/Language" },
              { "type": "null" }
            ],
            "description": "The default language for the agent.",
            "default": "en-US"
          },
          "vad_threshold": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Vad Threshold",
            "description": "Voice activity detection threshold for detecting speech."
          },
          "llm": {
            "anyOf": [
              { "$ref": "#/components/schemas/LLM" },
              { "type": "null" }
            ],
            "description": "Configuration for the LLM used by the agent."
          },
          "session_timeout": {
            "anyOf": [
              { "$ref": "#/components/schemas/SessionTimeout" },
              { "type": "null" }
            ],
            "description": "Settings related to session duration and idle time."
          },
          "session_data_webhook": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/WebhookConfig" },
              { "type": "null" }
            ],
            "title": "Session Data Webhook",
            "description": "Webhook for receiving end of session data."
          },
          "privacy_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/PrivacySetting" },
              { "type": "null" }
            ],
            "description": "Settings for user privacy and data collection."
          },
          "custom_vocabulary": {
            "anyOf": [
              { "$ref": "#/components/schemas/CustomVocabulary" },
              { "type": "null" }
            ],
            "description": "Custom vocabulary for improving recognition."
          },
          "extra_prompt_webhook": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/WebhookConfig" },
              { "type": "null" }
            ],
            "title": "Extra Prompt Webhook",
            "description": "Webhook for providing extra prompts and metadata at the start of a conversation."
          },
          "switch_language": {
            "anyOf": [
              { "$ref": "#/components/schemas/SwitchLanguage" },
              { "type": "null" }
            ],
            "description": "Settings for dynamically switching agent language."
          },
          "knowledge_base": {
            "anyOf": [
              { "$ref": "#/components/schemas/KnowledgeBase" },
              { "type": "null" }
            ],
            "description": "Configuration for the agent's knowledge base."
          },
          "speech_to_text": {
            "anyOf": [
              { "$ref": "#/components/schemas/SpeechToText" },
              { "type": "null" }
            ],
            "description": "Speech-to-text configuration for transcription."
          },
          "call_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/CallSettings" },
              { "type": "null" }
            ],
            "description": "General settings for calls."
          },
          "memory": {
            "anyOf": [
              { "$ref": "#/components/schemas/MemoryConfig" },
              { "type": "null" }
            ],
            "description": "Memory configuration for the agent."
          },
          "timezone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Timezone",
            "description": "The timezone for the agent's operation."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialAgentConfig"
      },
      "PartialAgentConfig-Output": {
        "properties": {
          "prompt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Prompt",
            "description": "The prompt used to configure the agent's behavior."
          },
          "voice": {
            "anyOf": [
              { "$ref": "#/components/schemas/Voice" },
              { "type": "null" }
            ],
            "description": "Configuration for the agent's voice."
          },
          "flow": {
            "anyOf": [
              { "$ref": "#/components/schemas/Flow-Output" },
              { "type": "null" }
            ],
            "description": "Settings for conversation flow management."
          },
          "first_message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Message",
            "description": "The agent's opening message for conversations."
          },
          "tools": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Function-Output" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Tools",
            "description": "List of tools/functions the agent can use."
          },
          "millis_functions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/MillisFunction-Output"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Millis Functions",
            "description": "Millis-specific functions for agent customization."
          },
          "app_functions": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/AppFunction" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "App Functions",
            "description": "Predefined functions tied to app integrations."
          },
          "custom_llm_websocket": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Custom Llm Websocket",
            "description": "WebSocket URL for custom LLM integration."
          },
          "language": {
            "anyOf": [
              { "$ref": "#/components/schemas/Language" },
              { "type": "null" }
            ],
            "description": "The default language for the agent.",
            "default": "en-US"
          },
          "vad_threshold": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Vad Threshold",
            "description": "Voice activity detection threshold for detecting speech."
          },
          "llm": {
            "anyOf": [
              { "$ref": "#/components/schemas/LLM" },
              { "type": "null" }
            ],
            "description": "Configuration for the LLM used by the agent."
          },
          "session_timeout": {
            "anyOf": [
              { "$ref": "#/components/schemas/SessionTimeout" },
              { "type": "null" }
            ],
            "description": "Settings related to session duration and idle time."
          },
          "session_data_webhook": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/WebhookConfig" },
              { "type": "null" }
            ],
            "title": "Session Data Webhook",
            "description": "Webhook for receiving end of session data."
          },
          "privacy_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/PrivacySetting" },
              { "type": "null" }
            ],
            "description": "Settings for user privacy and data collection."
          },
          "custom_vocabulary": {
            "anyOf": [
              { "$ref": "#/components/schemas/CustomVocabulary" },
              { "type": "null" }
            ],
            "description": "Custom vocabulary for improving recognition."
          },
          "extra_prompt_webhook": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/WebhookConfig" },
              { "type": "null" }
            ],
            "title": "Extra Prompt Webhook",
            "description": "Webhook for providing extra prompts and metadata at the start of a conversation."
          },
          "switch_language": {
            "anyOf": [
              { "$ref": "#/components/schemas/SwitchLanguage" },
              { "type": "null" }
            ],
            "description": "Settings for dynamically switching agent language."
          },
          "knowledge_base": {
            "anyOf": [
              { "$ref": "#/components/schemas/KnowledgeBase" },
              { "type": "null" }
            ],
            "description": "Configuration for the agent's knowledge base."
          },
          "speech_to_text": {
            "anyOf": [
              { "$ref": "#/components/schemas/SpeechToText" },
              { "type": "null" }
            ],
            "description": "Speech-to-text configuration for transcription."
          },
          "call_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/CallSettings" },
              { "type": "null" }
            ],
            "description": "General settings for calls."
          },
          "memory": {
            "anyOf": [
              { "$ref": "#/components/schemas/MemoryConfig" },
              { "type": "null" }
            ],
            "description": "Memory configuration for the agent."
          },
          "timezone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Timezone",
            "description": "The timezone for the agent's operation."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialAgentConfig"
      },
      "PersistantSipCallData": {
        "properties": {
          "init_agent": { "$ref": "#/components/schemas/InitAgent" },
          "region": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Region"
          }
        },
        "type": "object",
        "required": ["init_agent"],
        "title": "PersistantSipCallData"
      },
      "Phone": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "agent_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Agent Id"
          },
          "create_at": { "type": "number", "title": "Create At" },
          "status": { "type": "string", "title": "Status" },
          "agent_config_override": {
            "anyOf": [
              { "$ref": "#/components/schemas/PartialAgentConfig-Output" },
              { "type": "null" }
            ]
          },
          "tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": ["id", "create_at", "status"],
        "title": "Phone"
      },
      "PresignedUrlRequest": {
        "properties": { "filename": { "type": "string", "title": "Filename" } },
        "type": "object",
        "required": ["filename"],
        "title": "PresignedUrlRequest"
      },
      "PresignedUrlResponse": {
        "properties": {
          "url": { "type": "string", "title": "Url" },
          "fields": { "type": "object", "title": "Fields" }
        },
        "type": "object",
        "required": ["url", "fields"],
        "title": "PresignedUrlResponse"
      },
      "PrivacySetting": {
        "properties": {
          "opt_out_data_collection": {
            "type": "boolean",
            "title": "Opt Out Data Collection",
            "description": "Indicates if the user wants to opt out of data collection."
          },
          "do_not_call_detection": {
            "type": "boolean",
            "title": "Do Not Call Detection",
            "description": "Specifies whether Do Not Call detection is enabled. When enabled, the agent will detect if the user wants to opt-out of future calls or be added to a Do Not Call list.",
            "default": false
          }
        },
        "type": "object",
        "required": ["opt_out_data_collection"],
        "title": "PrivacySetting"
      },
      "PurchasePhoneNumberRequest": {
        "properties": {
          "country": { "type": "string", "title": "Country" },
          "area_code": { "type": "string", "title": "Area Code" },
          "street": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Street"
          },
          "city": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "state_region": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State Region"
          },
          "postal_code": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Postal Code"
          }
        },
        "type": "object",
        "required": ["country", "area_code"],
        "title": "PurchasePhoneNumberRequest"
      },
      "ResponseDelay": {
        "properties": {
          "generic_delay": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Generic Delay",
            "description": "Delay (in milliseconds) for generic responses."
          },
          "number_input_delay": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Number Input Delay",
            "description": "Delay (in milliseconds) for number input responses."
          }
        },
        "type": "object",
        "title": "ResponseDelay"
      },
      "SessionContinuation": {
        "properties": {
          "session_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Session Id"
          },
          "messages": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/UserMessage" },
                { "$ref": "#/components/schemas/AssistantMessage" },
                { "$ref": "#/components/schemas/ToolMessage" }
              ]
            },
            "type": "array",
            "title": "Messages"
          },
          "identifier_variable": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Identifier Variable"
          }
        },
        "type": "object",
        "title": "SessionContinuation"
      },
      "SessionTerminateData": {
        "properties": {
          "message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Message"
          }
        },
        "type": "object",
        "title": "SessionTerminateData"
      },
      "SessionTimeout": {
        "properties": {
          "max_duration": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Max Duration",
            "description": "Maximum call duration (in seconds) before ending the session."
          },
          "max_idle": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Max Idle",
            "description": "Maximum idle time (in seconds) with no user input before ending the session."
          },
          "message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Message",
            "description": "Message to play when the session times out."
          }
        },
        "type": "object",
        "title": "SessionTimeout"
      },
      "SetAgentFilesRequest": {
        "properties": {
          "agent_id": { "type": "string", "title": "Agent Id" },
          "files": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Files"
          },
          "messages": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Messages"
          }
        },
        "type": "object",
        "required": ["agent_id", "files"],
        "title": "SetAgentFilesRequest"
      },
      "SetAgentRequest": {
        "properties": {
          "agent_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Agent Id"
          }
        },
        "type": "object",
        "title": "SetAgentRequest"
      },
      "SetCallerRequest": {
        "properties": { "caller": { "type": "string", "title": "Caller" } },
        "type": "object",
        "required": ["caller"],
        "title": "SetCallerRequest"
      },
      "SetPhoneAgentData": {
        "properties": {
          "phone": { "type": "string", "title": "Phone" },
          "agent_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Agent Id"
          }
        },
        "type": "object",
        "required": ["phone"],
        "title": "SetPhoneAgentData"
      },
      "SpeechToText": {
        "properties": {
          "provider": {
            "anyOf": [
              { "$ref": "#/components/schemas/SpeechToTextProvider" },
              { "type": "null" }
            ],
            "description": "The STT provider for transcribing speech into text."
          },
          "multilingual": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Multilingual",
            "description": "Indicates if the STT supports multiple languages at the same time."
          },
          "model": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Model",
            "description": "Specified model for STT provider"
          }
        },
        "type": "object",
        "title": "SpeechToText"
      },
      "SpeechToTextProvider": {
        "type": "string",
        "enum": ["deepgram", "gladia", "talkscriber", "sarvam"],
        "title": "SpeechToTextProvider"
      },
      "StartOutboundCallData": {
        "properties": {
          "from_phone": { "type": "string", "title": "From Phone" },
          "to_phone": { "type": "string", "title": "To Phone" },
          "agent_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Agent Id"
          },
          "agent_config": {
            "anyOf": [
              { "$ref": "#/components/schemas/PartialAgentConfig-Input" },
              { "type": "null" }
            ]
          },
          "metadata": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Metadata"
          },
          "include_metadata_in_prompt": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Include Metadata In Prompt"
          },
          "session_continuation": {
            "anyOf": [
              { "$ref": "#/components/schemas/SessionContinuation" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["from_phone", "to_phone"],
        "title": "StartOutboundCallData"
      },
      "SwitchLanguage": {
        "properties": {
          "languages": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Languages",
            "description": "List of languages supported for dynamic switching during the conversation."
          }
        },
        "type": "object",
        "required": ["languages"],
        "title": "SwitchLanguage"
      },
      "ToolCall": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "type": { "type": "string", "title": "Type" },
          "function": {
            "$ref": "#/components/schemas/fast_api_data__messages__Function"
          }
        },
        "type": "object",
        "required": ["id", "type", "function"],
        "title": "ToolCall"
      },
      "ToolMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": ["tool"],
            "const": "tool",
            "title": "Role"
          },
          "content": { "type": "string", "title": "Content" },
          "tool_call_id": { "type": "string", "title": "Tool Call Id" }
        },
        "type": "object",
        "required": ["role", "content", "tool_call_id"],
        "title": "ToolMessage"
      },
      "TransferOption": {
        "properties": {
          "phone": {
            "type": "string",
            "title": "Phone",
            "description": "The phone number to transfer the call to."
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of when to use this transfer option."
          }
        },
        "type": "object",
        "required": ["phone"],
        "title": "TransferOption"
      },
      "UpdateTagsRequest": {
        "properties": {
          "tags": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": ["tags"],
        "title": "UpdateTagsRequest"
      },
      "UserInfo": {
        "properties": {
          "user_id": { "type": "string", "title": "User Id" },
          "credit": { "type": "number", "title": "Credit" },
          "used_credit": { "type": "number", "title": "Used Credit" },
          "auto_refill": { "$ref": "#/components/schemas/AutoRefillConfig" }
        },
        "type": "object",
        "required": ["user_id", "credit", "used_credit", "auto_refill"],
        "title": "UserInfo"
      },
      "UserMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": ["user"],
            "const": "user",
            "title": "Role"
          },
          "content": { "type": "string", "title": "Content" }
        },
        "type": "object",
        "required": ["role", "content"],
        "title": "UserMessage"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "Voice": {
        "properties": {
          "provider": {
            "allOf": [{ "$ref": "#/components/schemas/VoiceProvider" }],
            "description": "The TTS provider for generating the agent's voice."
          },
          "voice_id": {
            "type": "string",
            "title": "Voice Id",
            "description": "The unique identifier for the voice used by the agent."
          },
          "model": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Model",
            "description": "The model name provided by ElevenLabs (e.g., 'eleven_turbo_v2_5') for voice generation."
          },
          "settings": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Settings",
            "description": "Additional voice_settings for ElevenLabs voice, such as stability and similarity boost values."
          }
        },
        "type": "object",
        "required": ["provider", "voice_id"],
        "title": "Voice"
      },
      "VoiceOption": {
        "properties": {
          "provider": {
            "allOf": [{ "$ref": "#/components/schemas/VoiceProvider" }],
            "description": "The TTS provider for generating the agent's voice."
          },
          "voice_id": {
            "type": "string",
            "title": "Voice Id",
            "description": "The unique identifier for the voice used by the agent."
          },
          "model": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Model",
            "description": "The model name provided by ElevenLabs (e.g., 'eleven_turbo_v2_5') for voice generation."
          },
          "settings": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Settings",
            "description": "Additional voice_settings for ElevenLabs voice, such as stability and similarity boost values."
          },
          "name": { "type": "string", "title": "Name" },
          "preview_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Preview Url"
          },
          "language": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Language"
          },
          "category": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Category"
          },
          "multiplier": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Multiplier"
          }
        },
        "type": "object",
        "required": ["provider", "voice_id", "name"],
        "title": "VoiceOption"
      },
      "VoiceProvider": {
        "type": "string",
        "enum": [
          "elevenlabs",
          "openai",
          "cartesia",
          "playht",
          "deepgram",
          "rime",
          "neets",
          "openai_realtime",
          "dubverse",
          "orpheus",
          "sesame",
          "kokoro",
          "sarvam",
          "hume"
        ],
        "title": "VoiceProvider"
      },
      "Voicemail": {
        "properties": {
          "action": {
            "allOf": [{ "$ref": "#/components/schemas/VoicemailAction" }],
            "description": "The action to take when a voicemail is detected, e.g., hang up or leave a message."
          },
          "message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Message",
            "description": "The message to leave as voicemail if the agent opts to do so."
          },
          "continue_on_voice_activity": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Continue On Voice Activity",
            "description": "Determines if the agent continues the conversation on voice activity during voicemail handling."
          }
        },
        "type": "object",
        "required": ["action"],
        "title": "Voicemail"
      },
      "VoicemailAction": {
        "type": "string",
        "enum": ["hangup", "message"],
        "title": "VoicemailAction"
      },
      "WebRTCAnswer": {
        "properties": {
          "sdp": { "type": "string", "title": "Sdp" },
          "type": { "type": "string", "title": "Type" }
        },
        "type": "object",
        "required": ["sdp", "type"],
        "title": "WebRTCAnswer"
      },
      "WebRTCOffer": {
        "properties": {
          "sdp": { "type": "string", "title": "Sdp" },
          "type": { "type": "string", "title": "Type" }
        },
        "type": "object",
        "required": ["sdp", "type"],
        "title": "WebRTCOffer"
      },
      "WebhookConfig": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The webhook endpoint URL."
          },
          "headers": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Headers",
            "description": "Optional headers for the webhook requests."
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "WebhookConfig"
      },
      "fast_api_data__agent__CallHistory": {
        "properties": {
          "agent_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Agent Id"
          },
          "agent_config": { "type": "object", "title": "Agent Config" },
          "duration": { "type": "number", "title": "Duration" },
          "ts": { "type": "number", "title": "Ts" },
          "chat": { "type": "string", "title": "Chat" },
          "chars_used": { "type": "integer", "title": "Chars Used" },
          "session_id": { "type": "string", "title": "Session Id" },
          "call_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Call Id"
          },
          "cost_breakdown": {
            "items": { "type": "object" },
            "type": "array",
            "title": "Cost Breakdown"
          },
          "voip": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Voip"
          },
          "recording": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Recording"
          },
          "metadata": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Metadata"
          },
          "function_calls": {
            "anyOf": [
              { "items": { "type": "object" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Function Calls"
          },
          "call_status": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Call Status"
          }
        },
        "type": "object",
        "required": [
          "agent_config",
          "duration",
          "ts",
          "chat",
          "chars_used",
          "session_id",
          "cost_breakdown"
        ],
        "title": "CallHistory"
      },
      "fast_api_data__data__CallStatus": {
        "type": "string",
        "enum": [
          "registered",
          "queued",
          "dispatching",
          "provider_queued",
          "initiated",
          "ringing",
          "in-progress",
          "completed",
          "user-ended",
          "agent-ended",
          "api-ended",
          "voicemail-hangup",
          "voicemail-message",
          "timeout",
          "canceled",
          "busy",
          "no-answer",
          "failed",
          "error",
          "unknown",
          "chat_completion"
        ],
        "title": "CallStatus"
      },
      "fast_api_data__data__Function": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the function."
          },
          "params": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Param" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Params",
            "description": "List of parameters required by the function."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A description of the function's purpose."
          },
          "webhook": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Webhook",
            "description": "The webhook URL to trigger the function."
          },
          "header": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Header",
            "description": "Headers to include in the webhook request."
          },
          "method": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Method",
            "description": "HTTP method to use for the webhook (e.g., POST, GET)."
          },
          "timeout": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Timeout",
            "description": "Timeout in seconds for the function to complete before failing."
          },
          "run_after_call": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Run After Call",
            "description": "Specifies if the function should only run after the call ends."
          },
          "messages": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Messages",
            "description": "Predefined messages for agent to say while executing the function."
          },
          "response_mode": {
            "anyOf": [
              { "type": "string", "enum": ["strict", "flexible"] },
              { "type": "null" }
            ],
            "title": "Response Mode",
            "description": "Indicates if agent's response should be strict or flexible."
          },
          "execute_after_message": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Execute After Message",
            "description": "Indicates if the function starts executing only after a predefined message is played."
          },
          "exclude_session_id": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Exclude Session Id",
            "description": "Indicates if the session ID should not be included in the webhook request."
          },
          "include_metadata": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Include Metadata",
            "description": "Indicates if metadata should be included in the webhook request."
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "Function"
      },
      "fast_api_data__history__CallHistory": {
        "properties": {
          "agent_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Agent Id"
          },
          "agent_config": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Agent Config"
          },
          "duration": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Duration"
          },
          "ts": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Ts"
          },
          "chat": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Chat"
          },
          "chars_used": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Chars Used"
          },
          "session_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Session Id"
          },
          "call_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Call Id"
          },
          "cost_breakdown": {
            "anyOf": [
              { "items": { "type": "object" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Cost Breakdown"
          },
          "voip": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Voip"
          },
          "recording": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Recording"
          },
          "metadata": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Metadata"
          },
          "function_calls": {
            "anyOf": [
              { "items": { "type": "object" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Function Calls"
          },
          "call_status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/fast_api_data__data__CallStatus"
              },
              { "type": "null" }
            ]
          },
          "campaign_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Campaign Id"
          }
        },
        "type": "object",
        "title": "CallHistory"
      },
      "fast_api_data__messages__Function": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "arguments": { "type": "string", "title": "Arguments" }
        },
        "type": "object",
        "required": ["name", "arguments"],
        "title": "Function"
      },
      "third_party_helpers__campaign_helper__CallStatus": {
        "type": "string",
        "enum": ["not_started", "started", "finished", "failed"],
        "title": "CallStatus"
      }
    }
  }
}

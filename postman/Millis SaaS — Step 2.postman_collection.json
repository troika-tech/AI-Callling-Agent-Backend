{
  "info": {
    "name": "Millis SaaS — Step 2 (Simple Roles)",
    "_postman_id": "11111111-2222-3333-4444-555555555555",
    "description": "Auth + role-gated placeholders for admin/user (no tenants).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [],
  "item": [
    {
      "name": "1) Health",
      "request": {
        "method": "GET",
        "header": [],
        "url": { "raw": "{{baseUrl}}/api/v1/health", "host": ["{{baseUrl}}"], "path": ["api","v1","health"] }
      }
    },
    {
      "name": "2) Auth — Signup (role=user by default)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('201 Created', function () { pm.response.to.have.status(201); });",
              "const json = pm.response.json();",
              "pm.environment.set('accessToken', json.tokens.access);",
              "pm.environment.set('refreshToken', json.tokens.refresh);",
              "pm.test('Role is user', function () { pm.expect(json.user.role).to.eql('user'); });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"name\": \"Alice\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/api/v1/auth/signup", "host": ["{{baseUrl}}"], "path": ["api","v1","auth","signup"] }
      }
    },
    {
      "name": "3) Auth — Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', function () { pm.response.to.have.status(200); });",
              "const json = pm.response.json();",
              "pm.environment.set('accessToken', json.tokens.access);",
              "pm.environment.set('refreshToken', json.tokens.refresh);",
              "pm.test('Has user role', function () { pm.expect(['user','admin']).to.include(json.user.role); });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}" },
        "url": { "raw": "{{baseUrl}}/api/v1/auth/login", "host": ["{{baseUrl}}"], "path": ["api","v1","auth","login"] }
      }
    },
    {
      "name": "4) Auth — Refresh",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', function () { pm.response.to.have.status(200); });",
              "const json = pm.response.json();",
              "pm.environment.set('accessToken', json.access);",
              "pm.test('Got access token', function () { pm.expect(json.access).to.be.a('string'); });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}" },
        "url": { "raw": "{{baseUrl}}/api/v1/auth/refresh", "host": ["{{baseUrl}}"], "path": ["api","v1","auth","refresh"] }
      }
    },
    {
      "name": "5) Me — WhoAmI",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.request.headers.upsert({ key: 'Authorization', value: 'Bearer ' + pm.environment.get('accessToken') });"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', function () { pm.response.to.have.status(200); });",
              "const json = pm.response.json();",
              "pm.test('Has user object', function () { pm.expect(json).to.have.property('user'); });",
              "pm.test('Role in response', function () { pm.expect(['user','admin']).to.include(json.user.role); });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": { "raw": "{{baseUrl}}/api/v1/me/whoami", "host": ["{{baseUrl}}"], "path": ["api","v1","me","whoami"] }
      }
    },
    {
      "name": "6) Admin placeholder (requires role=admin)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.request.headers.upsert({ key: 'Authorization', value: 'Bearer ' + pm.environment.get('accessToken') });"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "  pm.test('Admin OK', function () { pm.response.to.have.status(200); });",
              "} else {",
              "  pm.test('Forbidden for non-admin', function () { pm.response.to.have.status(403); });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": { "raw": "{{baseUrl}}/api/v1/admin/placeholder", "host": ["{{baseUrl}}"], "path": ["api","v1","admin","placeholder"] }
      }
    },
    {
      "name": "7) User placeholder (requires role=user)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.request.headers.upsert({ key: 'Authorization', value: 'Bearer ' + pm.environment.get('accessToken') });"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "  pm.test('User OK', function () { pm.response.to.have.status(200); });",
              "} else {",
              "  pm.test('Forbidden for non-user', function () { pm.response.to.have.status(403); });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": { "raw": "{{baseUrl}}/api/v1/user/placeholder", "host": ["{{baseUrl}}"], "path": ["api","v1","user","placeholder"] }
      }
    },
    {
      "name": "8) Negative — WhoAmI without token",
      "request": {
        "method": "GET",
        "header": [],
        "url": { "raw": "{{baseUrl}}/api/v1/me/whoami", "host": ["{{baseUrl}}"], "path": ["api","v1","me","whoami"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [ "pm.test('401 Unauthorized', function () { pm.response.to.have.status(401); });" ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
